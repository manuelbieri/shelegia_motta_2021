window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Shelegia_Motta_2021", "modulename": "Shelegia_Motta_2021", "qualname": "", "type": "module", "doc": "<p>This package implements the models of <a href=\"shelegia_motta_2021.pdf\">Shelegia and Motta (2021)</a>.</p>\n\n<p><img src=\"https://img.shields.io/github/license/manuelbieri/shelegia_motta_2021\" alt=\"GitHub\" />\n<img src=\"https://img.shields.io/pypi/pyversions/Shelegia-Motta-2021\" alt=\"PyPI - Python Version\" />\n<img src=\"https://img.shields.io/github/repo-size/manuelbieri/shelegia_motta_2021\" alt=\"GitHub repo size\" />\n<img src=\"https://img.shields.io/github/last-commit/manuelbieri/shelegia_motta_2021\" alt=\"GitHub last commit\" />\n<img src=\"https://github.com/manuelbieri/shelegia_motta_2021/actions/workflows/ci.yml/badge.svg\" alt=\"CI\" />\n<img src=\"https://github.com/manuelbieri/shelegia_motta_2021/actions/workflows/codeql-analysis.yml/badge.svg\" alt=\"CodeQL\" />\n<img src=\"https://github.com/manuelbieri/shelegia_motta_2021/actions/workflows/ossar-analysis.yml/badge.svg\" alt=\"OSSAR\" />\n<img src=\"https://img.shields.io/github/release-date/manuelbieri/shelegia_motta_2021\" alt=\"GitHub Release Date\" />\n<img src=\"https://github.com/manuelbieri/shelegia_motta_2021/actions/workflows/pypi.yml/badge.svg\" alt=\"PyPi\" />\n<img src=\"https://img.shields.io/pypi/v/Shelegia-Motta-2021\" alt=\"PyPI\" />\n<img src=\"https://img.shields.io/pypi/status/Shelegia-Motta-2021\" alt=\"PyPI - Status\" />\n<img src=\"https://img.shields.io/github/deployments/manuelbieri/shelegia_motta_2021/github-pages?label=Documentation\" alt=\"GitHub deployments\" /></p>\n\n<h3 id=\"installation\">Installation</h3>\n\n<p>Installation over <a href=\"https://pypi.org/project/Shelegia-Motta-2021/\">PyPI</a>:</p>\n\n<pre><code>pip install Shelegia-Motta-2021\n</code></pre>\n\n<p>Or clone the repository via <a href=\"https://github.com/manuelbieri/shelegia_motta_2021\">GitHub</a>:</p>\n\n<pre><code>git clone https://github.com/manuelbieri/shelegia_motta_2021.git\n</code></pre>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>Since all models implement the Shelegia_Motta_2021.IModel.IModel - Interface, therefore all models provide the same functionality (public methods), even though the results may change substantially.</p>\n\n<p>For all models add the following import statement:</p>\n\n<pre><code>import Shelegia_Motta_2021.Models\n</code></pre>\n\n<h3 id=\"models\">Models</h3>\n\n<h4 id=\"base-model\">Base Model</h4>\n\n<pre><code>base_model = Shelegia_Motta_2021.Models.BaseModel()\n</code></pre>\n\n<h4 id=\"bargaining-power-model\">Bargaining Power Model</h4>\n\n<pre><code>bargaining_power_model = Shelegia_Motta_2021.Models.BargainingPowerModel()\n</code></pre>\n\n<h4 id=\"unobservable-choices-model\">Unobservable Choices Model</h4>\n\n<pre><code>unobservable_model = Shelegia_Motta_2021.Models.UnobservableModel()\n</code></pre>\n\n<h4 id=\"acquisition-model\">Acquisition Model</h4>\n\n<pre><code>acquisition_model = Shelegia_Motta_2021.Models.AcquisitionModel()\n</code></pre>\n\n<h3 id=\"basic-usage\">Basic usage</h3>\n\n<pre><code># every model type can be plugged in without changing the following code.\nmodel: Shelegia_Motta_2021.IModel.IModel = Shelegia_Motta_2021.Models.BaseModel()\n\n# print string representation of the model\nprint(model)\n\n# plot the best answers of the incumbent to the choice of the entrant\nmodel.plot_incumbent_best_answers()\n\n# plot the equilibrium path\nmodel.plot_equilibrium()\n</code></pre>\n\n<h3 id=\"dependencies\">Dependencies</h3>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Package &emsp;</th>\n  <th style=\"text-align:left;\">Version &emsp;</th>\n  <th style=\"text-align:left;\">Annotation &emsp;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">matplotlib</td>\n  <td style=\"text-align:left;\">3.4.3</td>\n  <td style=\"text-align:left;\">Always needed (includes numpy)</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">jupyter</td>\n  <td style=\"text-align:left;\">1.0.0</td>\n  <td style=\"text-align:left;\">Just for the demonstration in demo.ipynb</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">pdoc</td>\n  <td style=\"text-align:left;\">8.0.1</td>\n  <td style=\"text-align:left;\">Only to generate the documentation from scratch</td>\n</tr>\n</tbody>\n</table>\n\n<p><br>\nThese packages include all the needed imports for the functionality of this package.</p>\n\n<h3 id=\"documentation\">Documentation</h3>\n\n<p>For the latest version of the documentation open <a href=\"https://manuelbieri.github.io/shelegia_motta_2021/Shelegia_Motta_2021.html\">manuelbieri.github.io/shelegia_motta_2021</a> in your browser or call:</p>\n\n<pre><code>import Shelegia_Motta_2021\n\nShelegia_Motta_2021.docs()\n</code></pre>\n\n<h4 id=\"build-documentation\">Build Documentation</h4>\n\n<p>Install the pdoc package:</p>\n\n<pre><code>pip install pdoc\n</code></pre>\n\n<p>Generate api-documentation with the following command:</p>\n\n<pre><code>pdoc -o ./docs Shelegia_Motta_2021 --docformat \"numpy\" --math\n</code></pre>\n\n<h4 id=\"additional-notes\">Additional Notes</h4>\n\n<p>For further information about the coordinates used in the code, see resources/dev_notes.md.</p>\n"}, {"fullname": "Shelegia_Motta_2021.docs", "modulename": "Shelegia_Motta_2021", "qualname": "docs", "type": "function", "doc": "<p>Opens the latest published version of the documentation of this package.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.IModel", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel", "type": "class", "doc": "<p>Interface for all models in Shelegia and Motta (2021).</p>\n"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.__init__", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.ENTRANT_CHOICES", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.ENTRANT_CHOICES", "type": "variable", "doc": "<p>Contains all the possible product choices of the entrant.</p>\n\n<ul>\n<li>complement (C): The entrant develops another complement for the primary product of the incumbent.</li>\n<li>substitute (S): The entrant develops a perfect substitute to the primary product of the incumbent.</li>\n<li>indifferent (I): The entrant is indifferent between the two options, mentioned above.</li>\n</ul>\n"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.INCUMBENT_CHOICES", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.INCUMBENT_CHOICES", "type": "variable", "doc": "<p>Contains all the possible answers of the incumbent to the choice of the entrant.</p>\n\n<ul>\n<li>copy (\u00a9): The incumbent copies the complement of the entrant.</li>\n<li>refrain (\u00d8): The incumbent does not take any action.</li>\n</ul>\n"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.DEVELOPMENT_OUTCOME", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.DEVELOPMENT_OUTCOME", "type": "variable", "doc": "<p>Contains all the possible outcomes of the development for the chosen product of the entrant or the merged entity.</p>\n\n<ul>\n<li>success (Y): The entrant has sufficient assets to develop the second product.</li>\n<li>failure (N): The entrant has not sufficient assets to develop the second product.</li>\n</ul>\n"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.get_asset_values", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.get_asset_values", "type": "function", "doc": "<p>Returns the asset thresholds of the entrant.</p>\n\n<p>Number and type of the thresholds will be specific to the model.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, float]</strong>: Includes the thresholds for the assets of the entrant.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.get_copying_fixed_costs_values", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.get_copying_fixed_costs_values", "type": "function", "doc": "<p>Returns the fixed costs for copying thresholds of the incumbent.</p>\n\n<p>Number and type of the thresholds will be specific to the model.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, float]</strong>: Includes the thresholds for the fixed costs for copying of the incumbent.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.get_payoffs", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.get_payoffs", "type": "function", "doc": "<p>Returns the payoffs for different market configurations.</p>\n\n<p>A market configuration can include:</p>\n\n<ul>\n<li>$I_P$ : Primary product sold by the incumbent.</li>\n<li>$I_C$ : Complementary product to $I_P$ potentially sold by the incumbent, which is copied from $E_C$.</li>\n<li>$E_P$ : Perfect substitute to $I_P$ potentially sold by the entrant.</li>\n<li>$E_C$ : Complementary product to $I_P$ currently sold by the entrant</li>\n<li>$\\tilde{E}_C$ : Complementary product to $I_P$ potentially sold by the entrant.\n<br></li>\n</ul>\n\n<table>\n<thead>\n<tr>\n  <th>Market Config.</th>\n  <th style=\"text-align:center;\">$\\pi(I)$</th>\n  <th style=\"text-align:center;\">$\\pi(E)$</th>\n  <th style=\"text-align:center;\">CS</th>\n  <th style=\"text-align:center;\">W</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$I_P$ ; $E_C$</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n</tr>\n<tr>\n  <td>$I_P + I_C$ ; $E_C$</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n</tr>\n<tr>\n  <td>$I_P$ ; $E_P + E_C$</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n</tr>\n<tr>\n  <td>$I_P + I_C$ ; $E_P + E_C$</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n</tr>\n<tr>\n  <td>$I_P$ ; $E_C + \\tilde{E}_C$</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n</tr>\n<tr>\n  <td>$I_P + I_C$ ; $E_C + \\tilde{E}_C$</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n  <td style=\"text-align:center;\">N.A.</td>\n</tr>\n</tbody>\n</table>\n\n<p><br>\nThe payoffs are specific to the models.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, Dict[str, float]]</strong>: Contains the mentioned payoffs for different market configurations.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.get_optimal_choice", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.get_optimal_choice", "type": "function", "doc": "<p>Returns the optimal choice of the entrant and the incumbent based on a pair of assets of the entrant and fixed costs for copying of the incumbent.</p>\n\n<p>The output dictionary will contain the following details:</p>\n\n<ul>\n<li>\"entrant\": choice of the entrant (possible choices listed in Shelegia_Motta_2021.IModel.IModel.ENTRANT_CHOICES))</li>\n<li>\"incumbent\": choice of the incumbent (possible choices listed in Shelegia_Motta_2021.IModel.IModel.INCUMBENT_CHOICES)</li>\n<li>\"development\": outcome of the development (possible outcomes listed in Shelegia_Motta_2021.IModel.IModel.DEVELOPMENT_OUTCOME)</li>\n</ul>\n\n<p>To understand the details of the logic implemented, consult the chapter in Shelegia and Motta (2021) corresponding to the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (float):\nAssets of the entrant.</li>\n<li><strong>F</strong> (float):\nFixed costs for copying of the incumbent.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, str]</strong>: Optimal choice of the entrant, the incumbent and the outcome of the development.</li>\n</ul>\n", "parameters": ["self", "A", "F"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.plot_incumbent_best_answers", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.plot_incumbent_best_answers", "type": "function", "doc": "<p>Plots the best answers of the incumbent to all possible actions of the entrant.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axis</strong> (matplotlib.axes.Axes):\nAxis to draw the plot on. (optional)</li>\n<li><strong>**kwargs</strong>: Optional key word arguments for the best answers plot.<br>\n<ul>\n<li>title: title on top of the plot, instead of the default title.<br></li>\n<li>options_legend: If true, an additional legend, explaining the options of the entrant and the incumbent, will be added to the plot.<br></li>\n<li>thresholds_legend: If true, an additional legend explaining the thresholds of the entrant and the incumbent will be added to the plot.<br></li>\n<li>x_max : Maximum number plotted on the x - axis.<br></li>\n<li>y_max : Maximum number plotted on the y - axis.<br></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: Axis containing the plot.</li>\n</ul>\n", "parameters": ["self", "axis", "kwargs"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.plot_equilibrium", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.plot_equilibrium", "type": "function", "doc": "<p>Plots the equilibrium path based on the choices of the entrant and incumbent.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axis</strong> (matplotlib.axes.Axes):\nAxis to draw the plot on. (optional)</li>\n<li><strong>**kwargs</strong>: Optional key word arguments for the equilibrium plot.<br>\n<ul>\n<li>title: title on top of the plot, instead of the default title.<br></li>\n<li>options_legend: If true, an additional legend, explaining the options of the entrant and the incumbent, will be added to the plot.<br></li>\n<li>thresholds_legend: If true, an additional legend explaining the thresholds of the entrant and the incumbent will be added to the plot.<br></li>\n<li>x_max : Maximum number plotted on the x - axis.<br></li>\n<li>y_max : Maximum number plotted on the y - axis.<br></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: Axis containing the plot.</li>\n</ul>\n", "parameters": ["self", "axis", "kwargs"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.IModel.IModel.plot_payoffs", "modulename": "Shelegia_Motta_2021.IModel", "qualname": "IModel.plot_payoffs", "type": "function", "doc": "<p>Plots the payoffs for different market configurations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axis</strong> (matplotlib.axes.Axes):\nAxis to draw the plot on. (optional)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: Axis containing the plot.</li>\n</ul>\n", "parameters": ["self", "axis"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models", "modulename": "Shelegia_Motta_2021.Models", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel", "type": "class", "doc": "<p>There are two players in our base model: The Incumbent, which sells the primary product, denoted by Ip, and a start-up, called the Entrant, which sells a product Ec complementary to Ip. (One may think of Ip as a platform, and Ec as a service or product which can be accessed through the platform.) We are interested in studying the choice of E between developing a substitute to Ip, denoted by Ep, or another complement to Ip, denoted by \u1ebcc and the choice of I between copying E\u2019s original complementary product Ec by creating a perfect substitute Ic, or not. Since E may not have enough assets to cover the development cost of its second product, copying its current product will affect the entrant\u2019s ability to obtain funding for the development. We shall show that the incumbent has a strategic incentive to copy when the entrant plans to compete, and to abstain from copying when it plans to create another complement.</p>\n"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel.__init__", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel.__init__", "type": "function", "doc": "<p>Initializes a valid BaseModel object.</p>\n\n<p>The following preconditions have to be satisfied:</p>\n\n<ul>\n<li>(A1b) $\\delta$ / 2 &lt; $\\Delta$ &lt; 3 * $\\delta$ / 2</li>\n<li>(A2) K &lt; $\\delta$ / 2</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>u</strong> (float):\nUtility gained from consuming the primary product.</li>\n<li><strong>B</strong> (float):\nMinimal difference between the return in case of a success and the return in case of failure of E. B is called the private benefit of the entrant in case of failure.</li>\n<li><strong>small_delta</strong> (float):\n($\\delta$) Additional utility gained from a complement combined with a primary product.</li>\n<li><strong>delta</strong> (float):\n($\\Delta$) Additional utility gained from the substitute of the entrant compared to the primary product of the incumbent.</li>\n<li><strong>K</strong> (float):\nInvestment costs for the entrant to develop a second product.</li>\n</ul>\n", "parameters": ["self", "u", "B", "small_delta", "delta", "K"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel.TOLERANCE", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel.TOLERANCE", "type": "variable", "doc": "<p>Tolerance for the comparison of two floating numbers.</p>\n"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel.get_asset_values", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel.get_asset_values", "type": "function", "doc": "<p>Returns the asset thresholds of the entrant.</p>\n\n<table>\n<thead>\n<tr>\n  <th>Threshold $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Name $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Formula $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$A_S$</td>\n  <td style=\"text-align:left;\">A_s</td>\n  <td style=\"text-align:left;\">$(2)\\: B + K - \\Delta - 3\\delta/2$</td>\n</tr>\n<tr>\n  <td>$A_C$</td>\n  <td style=\"text-align:left;\">A_c</td>\n  <td style=\"text-align:left;\">$(3)\\: B + K - 3\\delta/2$</td>\n</tr>\n<tr>\n  <td>$\\overline{A}_S$</td>\n  <td style=\"text-align:left;\">A-s</td>\n  <td style=\"text-align:left;\">$(4)\\: B + K - \\Delta$</td>\n</tr>\n<tr>\n  <td>$\\overline{A}_C$</td>\n  <td style=\"text-align:left;\">A-c</td>\n  <td style=\"text-align:left;\">$(5)\\: B + K - \\delta/2$</td>\n</tr>\n</tbody>\n</table>\n\n<p><br></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, float]</strong>: Includes the thresholds for the assets of the entrant.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel.get_copying_fixed_costs_values", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel.get_copying_fixed_costs_values", "type": "function", "doc": "<p>Returns the fixed costs for copying thresholds of the incumbent.</p>\n\n<table>\n<thead>\n<tr>\n  <th>Threshold $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Name $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Formula $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$F^{YY}_S$</td>\n  <td style=\"text-align:left;\">F(YY)s</td>\n  <td style=\"text-align:left;\">$(6)\\: \\delta/2$</td>\n</tr>\n<tr>\n  <td>$F^{YN}_S$</td>\n  <td style=\"text-align:left;\">F(YN)s</td>\n  <td style=\"text-align:left;\">$(6)\\: u + 3\\delta/2$</td>\n</tr>\n<tr>\n  <td>$F^{YY}_C$</td>\n  <td style=\"text-align:left;\">F(YY)c</td>\n  <td style=\"text-align:left;\">$(6)\\: \\delta$</td>\n</tr>\n<tr>\n  <td>$F^{YN}_C$</td>\n  <td style=\"text-align:left;\">F(YN)c</td>\n  <td style=\"text-align:left;\">$(6)\\: \\delta/2$</td>\n</tr>\n</tbody>\n</table>\n\n<p><br></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, float]</strong>: Includes the thresholds for the fixed costs for copying of the incumbent.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel.get_payoffs", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel.get_payoffs", "type": "function", "doc": "<p>Returns the payoffs for different market configurations.</p>\n\n<p>A market configuration can include:</p>\n\n<ul>\n<li>$I_P$ : Primary product sold by the incumbent.</li>\n<li>$I_C$ : Complementary product to $I_P$ potentially sold by the incumbent, which is copied from $E_C$.</li>\n<li>$E_P$ : Perfect substitute to $I_P$ potentially sold by the entrant.</li>\n<li>$E_C$ : Complementary product to $I_P$ currently sold by the entrant</li>\n<li>$\\tilde{E}_C$ : Complementary product to $I_P$ potentially sold by the entrant.\n<br></li>\n</ul>\n\n<table>\n<thead>\n<tr>\n  <th>Market Config. $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">$\\pi(I) \\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">$\\pi(E) \\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">CS $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">W $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$I_P$ ; $E_C$</td>\n  <td style=\"text-align:left;\">$u + \\delta/2$</td>\n  <td style=\"text-align:left;\">$\\delta/2$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$u + \\delta$</td>\n</tr>\n<tr>\n  <td>$I_P + I_C$ ; $E_C$</td>\n  <td style=\"text-align:left;\">$u + \\delta$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$u + \\delta$</td>\n</tr>\n<tr>\n  <td>$I_P$ ; $E_P + E_C$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$\\Delta + \\delta$</td>\n  <td style=\"text-align:left;\">$u$</td>\n  <td style=\"text-align:left;\">$u + \\Delta + \\delta$</td>\n</tr>\n<tr>\n  <td>$I_P + I_C$ ; $E_P + E_C$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$\\Delta$</td>\n  <td style=\"text-align:left;\">$u + \\delta$</td>\n  <td style=\"text-align:left;\">$u + \\Delta + \\delta$</td>\n</tr>\n<tr>\n  <td>$I_P$ ; $E_C + \\tilde{E}_C$</td>\n  <td style=\"text-align:left;\">$u + \\delta$</td>\n  <td style=\"text-align:left;\">$\\delta$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$u + 2\\delta$</td>\n</tr>\n<tr>\n  <td>$I_P + I_C$ ; $E_C + \\tilde{E}_C$</td>\n  <td style=\"text-align:left;\">$u + 3\\delta/2$</td>\n  <td style=\"text-align:left;\">$\\delta/2$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$u + 2\\delta$</td>\n</tr>\n</tbody>\n</table>\n\n<p><br></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, Dict[str, float]]</strong>: Contains the mentioned payoffs for different market configurations.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel.get_optimal_choice", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel.get_optimal_choice", "type": "function", "doc": "<p>Returns the optimal choice of the entrant and the incumbent based on a pair of assets of the entrant and fixed costs for copying of the incumbent.</p>\n\n<p>The output dictionary will contain the following details:</p>\n\n<ul>\n<li>\"entrant\": choice of the entrant (possible choices listed in Shelegia_Motta_2021.IModel.IModel.ENTRANT_CHOICES))</li>\n<li>\"incumbent\": choice of the incumbent (possible choices listed in Shelegia_Motta_2021.IModel.IModel.INCUMBENT_CHOICES)</li>\n<li>\"development\": outcome of the development (possible outcomes listed in Shelegia_Motta_2021.IModel.IModel.DEVELOPMENT_OUTCOME)</li>\n</ul>\n\n<p>To understand the details of the logic implemented, consult the chapter in Shelegia and Motta (2021) corresponding to the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (float):\nAssets of the entrant.</li>\n<li><strong>F</strong> (float):\nFixed costs for copying of the incumbent.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, str]</strong>: Optimal choice of the entrant, the incumbent and the outcome of the development.</li>\n</ul>\n", "parameters": ["self", "A", "F"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel.plot_incumbent_best_answers", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel.plot_incumbent_best_answers", "type": "function", "doc": "<p>Plots the best answers of the incumbent to all possible actions of the entrant.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axis</strong> (matplotlib.axes.Axes):\nAxis to draw the plot on. (optional)</li>\n<li><strong>**kwargs</strong>: Optional key word arguments for the best answers plot.<br>\n<ul>\n<li>title: title on top of the plot, instead of the default title.<br></li>\n<li>options_legend: If true, an additional legend, explaining the options of the entrant and the incumbent, will be added to the plot.<br></li>\n<li>thresholds_legend: If true, an additional legend explaining the thresholds of the entrant and the incumbent will be added to the plot.<br></li>\n<li>x_max : Maximum number plotted on the x - axis.<br></li>\n<li>y_max : Maximum number plotted on the y - axis.<br></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: Axis containing the plot.</li>\n</ul>\n", "parameters": ["self", "axis", "kwargs"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel.plot_equilibrium", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel.plot_equilibrium", "type": "function", "doc": "<p>Plots the equilibrium path based on the choices of the entrant and incumbent.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axis</strong> (matplotlib.axes.Axes):\nAxis to draw the plot on. (optional)</li>\n<li><strong>**kwargs</strong>: Optional key word arguments for the equilibrium plot.<br>\n<ul>\n<li>title: title on top of the plot, instead of the default title.<br></li>\n<li>options_legend: If true, an additional legend, explaining the options of the entrant and the incumbent, will be added to the plot.<br></li>\n<li>thresholds_legend: If true, an additional legend explaining the thresholds of the entrant and the incumbent will be added to the plot.<br></li>\n<li>x_max : Maximum number plotted on the x - axis.<br></li>\n<li>y_max : Maximum number plotted on the y - axis.<br></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: Axis containing the plot.</li>\n</ul>\n", "parameters": ["self", "axis", "kwargs"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BaseModel.plot_payoffs", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BaseModel.plot_payoffs", "type": "function", "doc": "<p>Plots the payoffs for different market configurations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axis</strong> (matplotlib.axes.Axes):\nAxis to draw the plot on. (optional)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: Axis containing the plot.</li>\n</ul>\n", "parameters": ["self", "axis"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BargainingPowerModel", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BargainingPowerModel", "type": "class", "doc": "<p>Besides the parameters used in the paper, this class will introduce the parameter $\\beta$ in the models, called\nthe bargaining power of the incumbent. In the paper the default value 0.5 is used to derive the results.</p>\n"}, {"fullname": "Shelegia_Motta_2021.Models.BargainingPowerModel.__init__", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BargainingPowerModel.__init__", "type": "function", "doc": "<p>Besides $\\beta$ the parameters in this model do not change compared to Shelegia_Motta_2021.Models.BaseModel.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>beta</strong> (float):\nBargaining power of the incumbent relative to the entrant ($0 &lt; \\beta &lt; 1$).</li>\n</ul>\n", "parameters": ["self", "u", "B", "small_delta", "delta", "K", "beta"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BargainingPowerModel.get_asset_values", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BargainingPowerModel.get_asset_values", "type": "function", "doc": "<p>Returns the asset thresholds of the entrant.</p>\n\n<table>\n<thead>\n<tr>\n  <th>Threshold $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Name $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Formula $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$A_S$</td>\n  <td style=\"text-align:left;\">A_s</td>\n  <td style=\"text-align:left;\">$B + K - \\Delta - \\delta(2 - \\beta)$</td>\n</tr>\n<tr>\n  <td>$A_C$</td>\n  <td style=\"text-align:left;\">A_c</td>\n  <td style=\"text-align:left;\">$B + K - 3\\delta(1 - \\beta)$</td>\n</tr>\n<tr>\n  <td>$\\overline{A}_S$</td>\n  <td style=\"text-align:left;\">A-s</td>\n  <td style=\"text-align:left;\">$B + K - \\Delta$</td>\n</tr>\n<tr>\n  <td>$\\overline{A}_C$</td>\n  <td style=\"text-align:left;\">A-c</td>\n  <td style=\"text-align:left;\">$B + K - \\delta(1 - \\beta)$</td>\n</tr>\n</tbody>\n</table>\n\n<p><br></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, float]</strong>: Includes the thresholds for the assets of the entrant.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BargainingPowerModel.get_copying_fixed_costs_values", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BargainingPowerModel.get_copying_fixed_costs_values", "type": "function", "doc": "<p>Returns the fixed costs for copying thresholds of the incumbent.</p>\n\n<table>\n<thead>\n<tr>\n  <th>Threshold $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Name $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Formula $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$F^{YY}_S$</td>\n  <td style=\"text-align:left;\">F(YY)s</td>\n  <td style=\"text-align:left;\">$\\delta(1 - \\beta)$</td>\n</tr>\n<tr>\n  <td>$F^{YN}_S$</td>\n  <td style=\"text-align:left;\">F(YN)s</td>\n  <td style=\"text-align:left;\">$u + \\delta(2 - \\beta)$</td>\n</tr>\n<tr>\n  <td>$F^{YY}_C$</td>\n  <td style=\"text-align:left;\">F(YY)c</td>\n  <td style=\"text-align:left;\">$2\\delta(1 - \\beta)$</td>\n</tr>\n<tr>\n  <td>$F^{YN}_C$</td>\n  <td style=\"text-align:left;\">F(YN)c</td>\n  <td style=\"text-align:left;\">$\\delta(2 - \\beta)$</td>\n</tr>\n</tbody>\n</table>\n\n<p><br></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, float]</strong>: Includes the thresholds for the fixed costs for copying of the incumbent.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.BargainingPowerModel.get_payoffs", "modulename": "Shelegia_Motta_2021.Models", "qualname": "BargainingPowerModel.get_payoffs", "type": "function", "doc": "<p>Returns the payoffs for different market configurations.</p>\n\n<p>A market configuration can include:</p>\n\n<ul>\n<li>$I_P$ : Primary product sold by the incumbent.</li>\n<li>$I_C$ : Complementary product to $I_P$ potentially sold by the incumbent, which is copied from $E_C$.</li>\n<li>$E_P$ : Perfect substitute to $I_P$ potentially sold by the entrant.</li>\n<li>$E_C$ : Complementary product to $I_P$ currently sold by the entrant</li>\n<li>$\\tilde{E}_C$ : Complementary product to $I_P$ potentially sold by the entrant.\n<br></li>\n</ul>\n\n<table>\n<thead>\n<tr>\n  <th>Market Config. $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">$\\pi(I) \\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">$\\pi(E) \\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">CS $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">W $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$I_P$ ; $E_C$</td>\n  <td style=\"text-align:left;\">$u + \\delta\\beta$</td>\n  <td style=\"text-align:left;\">$\\delta(1 - \\beta)$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$u + \\delta$</td>\n</tr>\n<tr>\n  <td>$I_P + I_C$ ; $E_C$</td>\n  <td style=\"text-align:left;\">$u + \\delta$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$u + \\delta$</td>\n</tr>\n<tr>\n  <td>$I_P$ ; $E_P + E_C$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$\\Delta + \\delta$</td>\n  <td style=\"text-align:left;\">$u$</td>\n  <td style=\"text-align:left;\">$u + \\Delta + \\delta$</td>\n</tr>\n<tr>\n  <td>$I_P + I_C$ ; $E_P + E_C$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$\\Delta$</td>\n  <td style=\"text-align:left;\">$u + \\delta$</td>\n  <td style=\"text-align:left;\">$u + \\Delta + \\delta$</td>\n</tr>\n<tr>\n  <td>$I_P$ ; $E_C + \\tilde{E}_C$</td>\n  <td style=\"text-align:left;\">$u + 2\\delta\\beta$</td>\n  <td style=\"text-align:left;\">$2\\delta(1 - \\beta)$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$u + 2\\delta$</td>\n</tr>\n<tr>\n  <td>$I_P + I_C$ ; $E_C + \\tilde{E}_C$</td>\n  <td style=\"text-align:left;\">$u + \\delta(1 + \\beta)$</td>\n  <td style=\"text-align:left;\">$\\delta(1 - \\beta)$</td>\n  <td style=\"text-align:left;\">0</td>\n  <td style=\"text-align:left;\">$u + 2\\delta$</td>\n</tr>\n</tbody>\n</table>\n\n<p><br></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, Dict[str, float]]</strong>: Contains the mentioned payoffs for different market configurations.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.UnobservableModel", "modulename": "Shelegia_Motta_2021.Models", "qualname": "UnobservableModel", "type": "class", "doc": "<p>This model indicates that if the incumbent were not able to observe the entrant at the moment of choosing, the \u201ckill zone\u201d effect whereby the entrant stays away from the substitute in order to avoid being copied) would not take place. Intuitively, in the game as we studied it so far, the only reason why the entrant is choosing a trajectory leading to another complement is that it anticipates that if it chose one leading to a substitute, the incumbent would copy, making it an inefficient strategy for entering the market. However, if the incumbent cannot observe the entrant\u2019s choice of strategy, the entrant could not hope to strategically affect the decision of the incumbent. This would lead to the entrant having a host of new opportunities when entering the market and it makes competing with a large company much more attractive.</p>\n"}, {"fullname": "Shelegia_Motta_2021.Models.UnobservableModel.__init__", "modulename": "Shelegia_Motta_2021.Models", "qualname": "UnobservableModel.__init__", "type": "function", "doc": "<p>The parameters do not change compared to Shelegia_Motta_2021.Models.BargainingPowerModel.</p>\n", "parameters": ["self", "u", "B", "small_delta", "delta", "K", "beta"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.UnobservableModel.plot_incumbent_best_answers", "modulename": "Shelegia_Motta_2021.Models", "qualname": "UnobservableModel.plot_incumbent_best_answers", "type": "function", "doc": "<p>Plots the best answers of the incumbent to all possible actions of the entrant.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axis</strong> (matplotlib.axes.Axes):\nAxis to draw the plot on. (optional)</li>\n<li><strong>**kwargs</strong>: Optional key word arguments for the best answers plot.<br>\n<ul>\n<li>title: title on top of the plot, instead of the default title.<br></li>\n<li>options_legend: If true, an additional legend, explaining the options of the entrant and the incumbent, will be added to the plot.<br></li>\n<li>thresholds_legend: If true, an additional legend explaining the thresholds of the entrant and the incumbent will be added to the plot.<br></li>\n<li>x_max : Maximum number plotted on the x - axis.<br></li>\n<li>y_max : Maximum number plotted on the y - axis.<br></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.axes.Axes</strong>: Axis containing the plot.</li>\n</ul>\n", "parameters": ["self", "axis", "kwargs"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.UnobservableModel.get_optimal_choice", "modulename": "Shelegia_Motta_2021.Models", "qualname": "UnobservableModel.get_optimal_choice", "type": "function", "doc": "<p>Returns the optimal choice of the entrant and the incumbent based on a pair of assets of the entrant and fixed costs for copying of the incumbent.</p>\n\n<p>The output dictionary will contain the following details:</p>\n\n<ul>\n<li>\"entrant\": choice of the entrant (possible choices listed in Shelegia_Motta_2021.IModel.IModel.ENTRANT_CHOICES))</li>\n<li>\"incumbent\": choice of the incumbent (possible choices listed in Shelegia_Motta_2021.IModel.IModel.INCUMBENT_CHOICES)</li>\n<li>\"development\": outcome of the development (possible outcomes listed in Shelegia_Motta_2021.IModel.IModel.DEVELOPMENT_OUTCOME)</li>\n</ul>\n\n<p>To understand the details of the logic implemented, consult the chapter in Shelegia and Motta (2021) corresponding to the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (float):\nAssets of the entrant.</li>\n<li><strong>F</strong> (float):\nFixed costs for copying of the incumbent.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, str]</strong>: Optimal choice of the entrant, the incumbent and the outcome of the development.</li>\n</ul>\n", "parameters": ["self", "A", "F"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.AcquisitionModel", "modulename": "Shelegia_Motta_2021.Models", "qualname": "AcquisitionModel", "type": "class", "doc": "<p>In order to explore how acquisitions may modify the entrant\u2019s and the incumbent\u2019s strategic choices, we extend the base model\nin order to allow an acquisition to take place after the incumbent commits to copying the entrant\u2019s original complementary product\n(between t=1 and t=2, see table 2). We assume that the incumbent and the entrant share the gains (if any) attained from the acquisition equally.</p>\n"}, {"fullname": "Shelegia_Motta_2021.Models.AcquisitionModel.__init__", "modulename": "Shelegia_Motta_2021.Models", "qualname": "AcquisitionModel.__init__", "type": "function", "doc": "<p>An additional constraint is added compared to Shelegia_Motta_2021.Models.BaseModel. Namely, $\\Delta$ has to be bigger than $\\delta$, meaning the innovation of the entrant is not too drastic.</p>\n\n<p>Meanwhile, the parameters do not change compared to Shelegia_Motta_2021.Models.BargainingPowerModel.</p>\n", "parameters": ["self", "u", "B", "small_delta", "delta", "K", "beta"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.AcquisitionModel.ACQUISITION_OUTCOMES", "modulename": "Shelegia_Motta_2021.Models", "qualname": "AcquisitionModel.ACQUISITION_OUTCOMES", "type": "variable", "doc": "<p>Contains the options for an acquisition or not.</p>\n\n<ul>\n<li>merged (M): The incumbent acquired the entrant.</li>\n<li>apart (E): The incumbent did not acquired the entrant.</li>\n</ul>\n"}, {"fullname": "Shelegia_Motta_2021.Models.AcquisitionModel.get_copying_fixed_costs_values", "modulename": "Shelegia_Motta_2021.Models", "qualname": "AcquisitionModel.get_copying_fixed_costs_values", "type": "function", "doc": "<p>Returns the fixed costs for copying thresholds of the incumbent.</p>\n\n<p>Additional thresholds for the fixed cost of copying of the incumbent compared to the Shelegia_Motta_2021.Models.BargainingModel:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Threshold $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Name $\\:\\:\\:\\:\\:$</th>\n  <th style=\"text-align:left;\">Formula $\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:\\:$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$F^{ACQ}_S$</td>\n  <td style=\"text-align:left;\">F(ACQ)s</td>\n  <td style=\"text-align:left;\">$\\frac{(u + \\Delta - K)}{2} + \\delta(2 - \\beta)$</td>\n</tr>\n<tr>\n  <td>$F^{ACQ}_C$</td>\n  <td style=\"text-align:left;\">F(ACQ)c</td>\n  <td style=\"text-align:left;\">$\\frac{K}{2} + \\delta(2.5 - 3\\beta)$</td>\n</tr>\n</tbody>\n</table>\n\n<p><br></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, float]</strong>: Includes the thresholds for the fixed costs for copying of the incumbent.</li>\n</ul>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Shelegia_Motta_2021.Models.AcquisitionModel.get_optimal_choice", "modulename": "Shelegia_Motta_2021.Models", "qualname": "AcquisitionModel.get_optimal_choice", "type": "function", "doc": "<p>Returns the optimal choice of the entrant and the incumbent based on a pair of assets of the entrant and fixed costs for copying of the incumbent.</p>\n\n<p>The output dictionary will contain the following details:</p>\n\n<ul>\n<li>\"entrant\": choice of the entrant (possible choices listed in Shelegia_Motta_2021.IModel.IModel.ENTRANT_CHOICES))</li>\n<li>\"incumbent\": choice of the incumbent (possible choices listed in Shelegia_Motta_2021.IModel.IModel.INCUMBENT_CHOICES)</li>\n<li>\"development\": outcome of the development (possible outcomes listed in Shelegia_Motta_2021.IModel.IModel.DEVELOPMENT_OUTCOME)</li>\n</ul>\n\n<p>To understand the details of the logic implemented, consult the chapter in Shelegia and Motta (2021) corresponding to the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (float):\nAssets of the entrant.</li>\n<li><strong>F</strong> (float):\nFixed costs for copying of the incumbent.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, str]</strong>: Optimal choice of the entrant, the incumbent and the outcome of the development.</li>\n</ul>\n", "parameters": ["self", "A", "F"], "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();